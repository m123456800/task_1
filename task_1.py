# -*- coding: utf-8 -*-
"""Copy of Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ma7srWpsFYC_PZRPfvzhlp8DpUOFKcUg

# New section
"""

# INSTALL AND IMPORT REQUIRED LIBRARIES
!pip install -q pandas matplotlib seaborn wbgapi

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import wbgapi as wb

print("‚úÖ Libraries installed successfully!")

# FETCH AND VISUALIZE POPULATION DATA
def get_population_data():
    """Fetch population data from World Bank API"""
    try:
        print("‚è≥ Downloading data...")
        df = wb.data.DataFrame(
            'SP.POP.TOTL',  # Total population indicator
            time=range(2010, 2023),  # Last 13 years
            labels=True
        ).reset_index()

        # Clean and reshape data
        df = df.melt(
            id_vars=['economy', 'country'],
            var_name='year',
            value_name='population'
        )
        df['year'] = df['year'].str.replace('YR', '').astype(int)
        return df.dropna()

    except Exception as e:
        print(f"‚ùå Error fetching data: {e}")
        return None

def create_visualizations(df):
    """Create bar chart and histogram"""
    plt.figure(figsize=(15, 5))

    # 1. Bar Chart (Latest Year)
    plt.subplot(1, 2, 1)
    latest = df[df['year'] == df['year'].max()]
    top_10 = latest.nlargest(10, 'population')
    sns.barplot(
        data=top_10,
        x='population',
        y='country',
        palette='viridis'
    )
    plt.title(f'Top 10 Countries by Population ({df["year"].max()})')
    plt.xlabel('Population (billions)')

    # 2. Histogram (Global Distribution)
    plt.subplot(1, 2, 2)
    sns.histplot(
        data=df,
        x='population',
        bins=20,
        kde=True,
        color='skyblue'
    )
    plt.title('Global Population Distribution')
    plt.xlabel('Population (log scale)')
    plt.xscale('log')

    plt.tight_layout()
    plt.show()

# Execute the analysis
if __name__ == "__main__":
    pop_data = get_population_data()
    if pop_data is not None:
        print("\nüìã Sample Data (2022 values):")
        display(pop_data[pop_data['year'] == 2022].head())
        create_visualizations(pop_data)

# FETCH AND VISUALIZE POPULATION DATA (FIXED VERSION)
def get_population_data():
    """Fetch population data from World Bank API with proper error handling"""
    try:
        print("‚è≥ Downloading data from World Bank...")
        # Fetch data with explicit column selection
        df = wb.data.DataFrame(
            'SP.POP.TOTL',
            time=range(2020, 2023),  # Last 3 years for faster loading
            labels=True,
            columns=['series', 'economy', 'time', 'value']
        ).reset_index()

        # Rename columns for clarity
        df = df.rename(columns={
            'economy': 'country',
            'time': 'year',
            'value': 'population'
        })

        # Clean year format and convert population to numeric
        df['year'] = df['year'].str.replace('YR', '').astype(int)
        df['population'] = pd.to_numeric(df['population'], errors='coerce')

        return df.dropna()

    except Exception as e:
        print(f"‚ùå Error fetching data: {str(e)}")
        return None

def create_visualizations(df):
    """Create professional visualizations"""
    if df is None:
        return

    plt.figure(figsize=(16, 6))

    # 1. Bar Chart (Latest Year)
    plt.subplot(1, 2, 1)
    latest_year = df['year'].max()
    latest_data = df[df['year'] == latest_year]
    top_10 = latest_data.nlargest(10, 'population')

    bar = sns.barplot(
        data=top_10,
        x='population',
        y='country',
        palette='rocket'
    )

    # Format population in billions
    bar.set_xticklabels([f"{x/1e9:.1f}B" for x in bar.get_xticks()])
    plt.title(f'Top 10 Countries by Population ({latest_year})', pad=20)
    plt.xlabel('Population')
    plt.ylabel('')

    # 2. Histogram (Global Distribution)
    plt.subplot(1, 2, 2)
    hist = sns.histplot(
        data=df,
        x='population',
        bins=30,
        kde=True,
        color='#2ecc71'
    )
    plt.title('Global Population Distribution', pad=20)
    plt.xlabel('Population (log scale)')
    plt.xscale('log')
    plt.ylabel('Number of Countries')

    plt.tight_layout()
    plt.show()

# Execute the analysis
if __name__ == "__main__":
    pop_data = get_population_data()
    if pop_data is not None:
        print("\nüìã Sample Data (Latest Year):")
        display(pop_data[pop_data['year'] == pop_data['year'].max()].head(3))

        print(f"\nüìä Dataset contains {len(pop_data)} records")
        print(f"üåç Countries: {pop_data['country'].nunique()}")
        print(f"üìÖ Years: {sorted(pop_data['year'].unique())}")

        create_visualizations(pop_data)

# FETCH AND VISUALIZE POPULATION DATA (FULLY WORKING VERSION)
def get_population_data():
    """Fetch and clean population data with complete error handling"""
    try:
        print("‚è≥ Downloading latest data from World Bank...")

        # Fetch data with explicit parameters
        data = wb.data.DataFrame(
            'SP.POP.TOTL',
            economy=wb.region.members('WLD'),  # All countries
            time=range(2020, 2024),  # Recent years
            skipBlanks=True,
            labels=True
        )

        # Transform the data structure
        df = data.reset_index().melt(
            id_vars=['economy', 'Country'],
            var_name='year',
            value_name='population'
        )

        # Clean and format columns
        df = df.rename(columns={'economy': 'country_code', 'Country': 'country'})
        df['year'] = df['year'].str.extract('(\d+)')[0].astype(int)
        df['population'] = pd.to_numeric(df['population'], errors='coerce')

        return df.dropna().sort_values(['year', 'population'], ascending=[False, False])

    except Exception as e:
        print(f"‚ùå Critical error: {str(e)}")
        print("‚ö†Ô∏è Tip: Check if wbgapi needs updating: !pip install --upgrade wbgapi")
        return None

def create_visualizations(df):
    """Generate publication-quality visualizations"""
    if df is None or df.empty:
        print("No data available for visualization")
        return

    plt.figure(figsize=(18, 7))
    plt.suptitle('World Population Analysis', y=1.05, fontsize=16, fontweight='bold')

    # 1. Top Countries Bar Chart
    plt.subplot(1, 2, 1)
    latest = df[df['year'] == df['year'].max()]
    top_15 = latest.nlargest(15, 'population')

    ax1 = sns.barplot(
        data=top_15,
        x='population',
        y='country',
        palette='plasma',
        estimator=sum,
        ci=None
    )

    # Format x-axis in billions
    ax1.set_xticks([x*1e9 for x in range(0, 16, 2)])
    ax1.set_xticklabels([f"{x}B" for x in range(0, 16, 2)])
    plt.title(f'Top 15 Countries ({df["year"].max()})', pad=15)
    plt.xlabel('Population (Billions)')
    plt.ylabel('')

    # 2. Population Distribution Histogram
    plt.subplot(1, 2, 2)
    ax2 = sns.histplot(
        data=df,
        x='population',
        bins=50,
        kde=True,
        color='#3498db',
        log_scale=True
    )

    # Formatting
    ax2.set_xlabel('Population (Log Scale)')
    ax2.set_ylabel('Country Count')
    ax2.set_title('Global Population Distribution', pad=15)
    plt.grid(True, which='both', ls='--', alpha=0.3)

    plt.tight_layout()
    plt.show()

# Execute with comprehensive checks
if __name__ == "__main__":
    print("üöÄ Starting analysis...")
    pop_data = get_population_data()

    if pop_data is not None and not pop_data.empty:
        print(f"\n‚úÖ Data loaded successfully ({len(pop_data)} records)")
        print(f"üåç Countries: {pop_data['country'].nunique()}")
        print(f"üìÖ Years: {sorted(pop_data['year'].unique())}")

        print("\nüìã Latest Year Sample:")
        display(pop_data[pop_data['year'] == pop_data['year'].max()].head(5))

        create_visualizations(pop_data)
    else:
        print("‚ùå Failed to load data. Please check your internet connection and try again.")
        print("üí° Try updating wbgapi: !pip install --upgrade wbgapi")